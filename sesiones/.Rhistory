border=F, col=colors[PeruMap[PeruMap@data$NOMBDEP=="LIMA",]])
LIMA=PeruMap[PeruMap@data$NOMBDEP=="LIMA",]
plot(LIMA,
border=F, col=colors[LIMA@data$cluster])
test=PeruMap@data[,c('ganappk','esperanza','secundaria','tiempoedu','percapitaf')]
aggregate(cbind(esperanza,secundaria,tiempoedu,percapitaf) ~ ganappk, data=test,FUN=mean)
par(mfrow=c(2,2))
boxplot(esperanza ~ ganappk, data=test,main='esperanza de vida')
boxplot(secundaria ~ ganappk, data=test,main='secundaria')
boxplot(tiempoedu ~ ganappk, data=test,main='años de educación')
boxplot(percapitaf ~ ganappk, data=test,main='percapita familiar')
testLogit <- glm(ganappk ~ .,
data = test,
family = "binomial")
summary(testLogit)
testLogit <- glm(ganappk ~ .,
data = test,
family = "binomial")
summary(testLogit)
exp(coef(testLogit))
exp(coef(testLogit))
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
testLinear=glm(PPK ~ ., data= test2, family=gaussian)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
testLinear=glm(PPK ~ ., data= test2, family=gaussian)
summary(testLinear)
hist(PeruMap@dataPPK)
hist(PeruMap@data$PPK)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
testLinear=glm(PPK ~ ., data= test2, family=poisson)
summary(testLinear)
PeruMap@data$$densidadPob=PeruMap@data$PPK/PeruMap@data$pobla
PeruMap@data$densidadPob=PeruMap@data$PPK/PeruMap@data$pobla
names(PeruMap)
PeruMap@data$densidadPob=PeruMap@data$PPK/PeruMap@data$pobla
hist(PeruMap@data$densidadPob)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
testLinear=glm.nb(PPK ~ ., data= test2, family=poisson)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
##
library(MASS)
testLinear=glm.nb(PPK ~ ., data= test2, family=poisson)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
##
library(MASS)
testLinear=glm.nb(PPK ~ ., data= test2)
summary(testLinear)
test3=PeruMap@data[,c('densidadPob','esperanza','secundaria','tiempoedu','percapitaf')]
testRegre <- glm(densidadPob ~ .,
data = test3,
family = gaussian)
summary(testLogit)
hist(log(test3$densidadPob))
testRegre <- glm(log(densidadPob) ~ .,
data = test3,
family = gaussian)
test4=test3
test4$densidadPob=log(test4$densidadPob)
testRegre <- glm(densidadPob ~ .,
data = test4,
family = gaussian)
test4=test3
test4$densidadPob=log(test4$densidadPob)
testRegre <- glm(densidadPob ~ .,
data = test4,
family = gaussian)
test4$densidadPob
hist(power(test3$densidadPob,2))
hist(test3$densidadPob^2)
test3=PeruMap@data[,c('densidadPob','esperanza','secundaria','tiempoedu','percapitaf')]
testRegre <- glm(densidadPob ~ .,
data = test3,
family = gaussian)
summary(testRegre)
test2=PeruMap@data[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
##
library(MASS)
testCount=glm.nb(PPK ~ ., data= test2)
summary(testCount)
test3=PeruMap@data[,c('densidadPob','esperanza','secundaria','tiempoedu','percapitaf')]
testMedida <- glm(densidadPob ~ .,
data = test3,
family = gaussian)
summary(testMedida)
qqnorm(residuals(testMedida, type="deviance"))
abline(a=0,b=1)
qqnorm(residuals(testMedida))
abline(a=0,b=1)
folder='data'
fileName='idePeru2012.csv'
fileToRead=file.path(folder,fileName)
ide12=read.csv(fileToRead,strip.white = T)
str(ide12)
folder='data'
fileName='idePeru2012.csv'
fileToRead=file.path(folder,fileName)
ide12=read.csv(fileToRead,strip.white = T)
str(ide12)
ide12=read.csv(fileToRead,strip.white = T,
colClasses=c(rep('character',4),
rep('numeric',7),
rep('factor',3)))
str(ide12)
names(ide12)
# Aquí están los componentes
provMap=ide12[,c(5:10)]
# Viendo resultado:
head(provMap)
row.names(provMap)=ide12$ubiProv
head(provMap)
# normalizar:
provMap_s=scale(provMap)
# hallar distancias entre ellos:
provMap_d=dist(provMap_s)
provMap_r <- cmdscale(provMap_d,eig=TRUE, k=2) # k sugiere dimensiones
provMap_r$GOF # mientras mas cerca a 1 mejor.
dimension1 <- fit1$points[,1]
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, main="EMD")
columnForLabels=ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE",	type="n")
text(dimension1, dimension2,
labels = labelsMap,
cex=.7,col=cols[columnForLabels])
columnForLabels=ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE",	type="n")
text(dimension1, dimension2,
labels = labelsMap,
cex=.7,col=cols[columnForLabels])
columnForLabels=ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE",	type="n")
text(dimension1, dimension2,
labels = columnForLabels,
cex=.7,col=cols[columnForLabels])
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, main="EMD")
columnForLabels=ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE",	type="n")
text(x, y,
labels = columnForLabels,
col=cols[columnForLabels])
row.names(provMap_r)
row.names(provMap_r)
row.names(provMap_s)
row.names(provMap_s)
columnForLabels=row.names(provMap_s)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
columnForLabels=row.names(provMap_s)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
columnForLabels=row.names(provMap_r)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
columnForLabels=dim.names(provMap_r)#ide12$COSTA
columnForLabels=dimnames(provMap_r)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
str(provMap_r)
str(provMap_r[1])
str(provMap_r[[1]])
str(provMap_r[[1]][[1]])
length(provMap_r[[1]])
dimnames(provMap_r[[1]])
dimnames(provMap_r[[1]][[1]])
dimnames(provMap_r[[1]])[[1]]
row.names(provMap_s)
columnForLabels=dimnames(provMap_r[[1]])[[1]]#row.names(provMap_s)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
columnForLabels=row.names(provMap_s)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
columnForLabels=dimnames(provMap_r[[1]])[[1]]#row.names(provMap_s)#ide12$COSTA
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
cols=c('red','blue')
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
# etiquetas y colores de los puntos
columnForLabels=dimnames(provMap_r[[1]])[[1]]
cols=c('red','blue')
text(x, y,labels = columnForLabels,col=cols[columnForLabels])
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main="Mapa de Similitudes entre provincias del Perú basado en el IDE", type="n")
# etiquetas y colores de los puntos
columnForLabels=dimnames(provMap_r[[1]])[[1]]
text(x, y,labels = columnForLabels)
titulo="Mapa de Similitudes entre provincias del Perú basado en el IDE"
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, main=titulo)
x <- provMap_r$points[,1]
y <- provMap_r$points[,2]
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2",
main=titulo, type="n")
# etiquetas y colores de los puntos
columnForLabels=dimnames(provMap_r[[1]])[[1]]
text(x, y,labels = columnForLabels)
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2", main=titulo,
type="n") # 'n' evita que se pongan los puntos.
# etiquetas y colores de los puntos
columnForLabels=row.names(provMap_s)
text(x, y,labels = columnForLabels)
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2", main=titulo,
type="n") # 'n' evita que se pongan los puntos.
# etiquetas y colores de los puntos
columnForLabels=ide12$PROVINCIA
text(x, y,labels = columnForLabels)
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2", main=titulo,
type="n") # 'n' evita que se pongan los puntos.
# etiquetas y colores de los puntos
columnForLabels=ide12$PROVINCIA
text(x, y,labels = columnForLabels, cex = 0.3)
plot(x, y, xlab="Dimensión 1", ylab="Dimensión 2", main=titulo,
type="n") # 'n' evita que se pongan los puntos.
# etiquetas y colores de los puntos
columnForLabels=ide12$PROVINCIA
text(x, y,labels = columnForLabels, cex = 0.3)
install.packages("polycor")
library(haven)
fileName='PeruLAPOP2014.sav'
fileToRead=file.path(folder,fileName)
setwd("~/Documents/GITHUBs/PUCP/EstadisticaPoliticaGobiernoII/sesiones")
library(haven)
fileName='PeruLAPOP2014.sav'
fileToRead=file.path(folder,fileName)
folder='data'
fileName='idePeru2012.csv'
fileToRead=file.path(folder,fileName)
ide12=read.csv(fileToRead,strip.white = T)
library(haven)
fileName='PeruLAPOP2014.sav'
fileToRead=file.path(folder,fileName)
dataSpss=read_sav(fileToRead)
ncol(dataSpss)
set1=c(56:73)
set2=which(names(dataSpss)%in%labelsCol1)
# solo son 3:
labelsCol2=c('pr3a','pr3b','pr3c','pr4')
which(names(dataSpss)%in%labelsCol2)
# solo son 3:
labelsCol1=c('n9','n11','n15')
which(names(dataSpss)%in%labelsCol1)
set1=c(56:73)
set2=which(names(dataSpss)%in%labelsCol1)
set3=which(names(dataSpss)%in%labelsCol2)
#
columnasQueNecesito=c(set1,set2 ,set3)
sub_dataSpss=dataSpss[,columnasQueNecesito]
# ver:
head(sub_dataSpss)
# cual es la columna?
which(names(sub_dataSpss)%in%'b33')
sub_dataSpss=sub_dataSpss[,-16]
# asegurarse que es data frame:
subTable=data.frame(sub_dataSpss)
# ver tipo de datos
str(subTable)
summary(subTable,maxsum = 8)
subTable=as.ordered(subTable)
as.ordered(subTable)
as.factor(subTable)
subTable
# asegurarse que es data frame:
subTable=data.frame(sub_dataSpss)
# ver tipo de datos
str(subTable)
for(i in 1:ncol(subTable)){
subTable[is.na(subTable[,i]), i] <- median(subTable[,i], na.rm = TRUE)
}
summary(subTable,maxsum = 8)
View(subTable)
as.data.frame(lapply(subTable,as.ordered))
subTable=as.data.frame(lapply(subTable,as.ordered))
str(subTable)
library(polycor)
pc <- hetcor(subTable, ML=TRUE)
for(i in 1:ncol(subTable)){  # para cada columna:
MEDIANA=median(subTable[,i], na.rm = TRUE) # calcula la mediana de esa columna
subTable[is.na(subTable[,i]), i] <- round(MEDIANA,0) # pon la mediana donde haya un NA en esa columna (redondeada)
}
# asegurarse que es data frame:
subTable=data.frame(sub_dataSpss)
# ver tipo de datos
str(subTable)
summary(subTable,maxsum = 8)
for(i in 1:ncol(subTable)){  # para cada columna:
MEDIANA=median(subTable[,i], na.rm = TRUE) # calcula la mediana de esa columna
subTable[is.na(subTable[,i]), i] <- round(MEDIANA,0) # pon la mediana donde haya un NA en esa columna (redondeada)
}
subTable=as.data.frame(lapply(subTable,as.ordered))
str(subTable)
library(polycor)
pc <- hetcor(subTable, ML=TRUE)
library(polycor)
pc <- hetcor(subTable, ML=F)
summary(subTable,maxsum = 8)
library(psych)
Poly_cor <- polychoric(subTable)$rho
KMO(Poly_cor)  #MSA: al menos 0.60, 0.9 es buenisimo.
cortest.bartlett(Poly_cor, n=nrow(subTable))
smc(Poly_cor,covar = T)
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
as.numeric(subTable)
library(polycor)
pc <- hetcor(subTable, ML=F)
table(subTable)
library(polycor)
pc <- polychoric(subTable, ML=F)
library(polycor)
pc <- hetcor(subTable, ML=F)
cor(subTable,method = "spearman")
library(psych)
Poly_cor <- polychoric(subTable)$rho
# asegurarse que es data frame:
subTable=data.frame(sub_dataSpss)
# ver tipo de datos
str(subTable)
summary(subTable,maxsum = 8)
for(i in 1:ncol(subTable)){  # para cada columna:
MEDIANA=median(subTable[,i], na.rm = TRUE) # calcula la mediana de esa columna
subTable[is.na(subTable[,i]), i] <- round(MEDIANA,0) # pon la mediana donde haya un NA en esa columna (redondeada)
}
library(psych)
Poly_cor <- polychoric(subTable)$rho
summary(subTable,maxsum = 8)
KMO(Poly_cor)  #MSA: al menos 0.60, 0.9 es buenisimo.
KMO(Poly_cor)  #MSA: al menos 0.60, 0.9 es buenisimo.
cortest.bartlett(Poly_cor, n=nrow(subTable))
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
resultadoPr=principal(Poly_cor,1,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
resultadoPr$values
resultadoPr$loadings
resultadoPr$factors
resultadoPr$fit
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0)
resultadoPr$fn
resultadoPr$Structure
str(resultadoPr$Structure)
resultadoPr$Structure[[1]]
resultadoPr$Structure[1]
resultadoPr$Structure[[2]]
str(resultadoPr$Structure)
as.data.frame(resultadoPr$Structure)
resultadoPr$Structure
resultadoPr$weights
str(resultadoPr$weights)
resultadoPr$loadings
plot(resultadoPr$loadings)
library(haven)
fileName='car_sales.sav'
fileToRead=file.path(folder,fileName)
dataSpss=read_sav(fileToRead)
names(dataSpss)
names(dataSpss[5:14])
names(dataSpss[5:20])
names(dataSpss[1:20])
names(dataSpss[5:14])
library(haven)
fileName='car_sales.sav'
fileToRead=file.path(folder,fileName)
dataSpss=read_sav(fileToRead)
resultadoX=principal(dataSpss[,c(5:14)],3,rotate="varimax", scores=T)
print(resultadoX,digits=3,cut = 0.4)
library(haven)
fileName='car_sales.sav'
fileToRead=file.path(folder,fileName)
dataSpss=read_sav(fileToRead)
resultadoX=principal(dataSpss[,c(5:14)],3,rotate="varimax", scores=T)
print(resultadoX,digits=3)
resultadoX$rotation
resultadoX$communality
resultadoX$loadings
resultadoX$fit
resultadoX$fit.off
resultadoX$fn
resultadoX$fn
resultadoX$Call
resultadoX$uniquenesses
resultadoX$complexity
resultadoX$EPVAL
resultadoX$R2
resultadoX$rms
resultadoX$scores
resultadoX$Structure
resultadoX$Vaccounted
resultadoX$rot.mat
resultadoX$r.scores
resultadoX$weights
plot(resultadoX$weights)
str(resultadoX$weights)
as.data.frame(resultadoX$weights)
plot(as.data.frame(resultadoX$weights))
plot(as.data.frame(resultadoX$scores))
as.data.frame(resultadoX$scores)
as.data.frame(resultadoX$weights)
resultadoX$weights
library(haven)
fileName='car_sales.sav'
fileToRead=file.path(folder,fileName)
dataSpss=read_sav(fileToRead)
resultadoX=principal(dataSpss[,c(5:14)],3,rotate="varimax", scores=T)
print(resultadoX,digits=3)
resultadoX$weights
plot(as.data.frame(resultadoX$scores))
plot(regresFactors)
regresFactors=factor.scores(subTable,resultadoPr)$scores
plot(regresFactors)
plot(as.data.frame(regresFactors))
resultadoPr=principal(Poly_cor,3,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
folder='data'
fileName='idh_elec.csv'
fileToRead=file.path(folder,fileName)
idh_elec=read.csv(fileToRead,strip.white = T,
stringsAsFactors = F)
str(idh_elec)
folder='data'
fileName='idh_elec.csv'
fileToRead=file.path(folder,fileName)
idh_elec=read.csv(fileToRead,strip.white = T,
stringsAsFactors = F)
str(idh_elec)
idh_elec$ganappk=as.factor(ifelse(idh_elec$PPK>idh_elec$FP,1,0))
levels(idh_elec$ganappk)=c('Keiko','PPK')
test=PeruMap@data[,c('ganappk','esperanza','secundaria','tiempoedu','percapitaf')]
test=idh_elec[,c('ganappk','esperanza','secundaria','tiempoedu','percapitaf')]
aggregate(cbind(esperanza,secundaria,tiempoedu,percapitaf) ~ ganappk, data=test,FUN=mean)
par(mfrow=c(2,2))
boxplot(esperanza ~ ganappk, data=test,main='esperanza de vida')
boxplot(secundaria ~ ganappk, data=test,main='secundaria')
boxplot(tiempoedu ~ ganappk, data=test,main='años de educación')
boxplot(percapitaf ~ ganappk, data=test,main='percapita familiar')
testLogit <- glm(ganappk ~ .,
data = test,
family = "binomial")
summary(testLogit)
exp(coef(testLogit))
hist(PeruMap@data$PPK)
hist(idh_elec$PPK)
test2=idh_elec[,c('PPK','esperanza','secundaria','tiempoedu','percapitaf')]
##
library(MASS)
testCount=glm.nb(PPK ~ ., data= test2)
summary(testCount)
idh_elec$densidadPob=idh_elec$PPK/idh_elec$pobla
hist(idh_elec$densidadPob)
test3=idh_elec[,c('densidadPob','esperanza','secundaria','tiempoedu','percapitaf')]
testMedida <- glm(densidadPob ~ .,
data = test3,
family = gaussian)
summary(testMedida)
qqnorm(residuals(testMedida))
abline(a=0,b=1)
